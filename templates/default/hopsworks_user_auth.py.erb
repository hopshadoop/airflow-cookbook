# -*- coding: utf-8 -*-
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


# Wireshark filter:   http and tcp.port == 12358
# POST /admin/airflow/login HTTP/1.1
# Host: localhost:12358
# Connection: keep-alive
# Content-Length: 133
# Cache-Control: max-age=0
# Origin: http://localhost:12358
# Upgrade-Insecure-Requests: 1
# Content-Type: application/x-www-form-urlencoded
# User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36
# Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
# Referer: http://localhost:12358/admin/airflow/login?next=%2Fadmin%2F
# Accept-Encoding: gzip, deflate, br
# Accept-Language: sv-SE,sv;q=0.9,en-US;q=0.8,en;q=0.7,de-DE;q=0.6,de;q=0.5
# Cookie: treeForm_tree-hi=treeForm:tree:applications; SESSION=e5b3e5fefc27d4583d6c0af38237; JSESSIONIDSSO=FDC1F03DF02AAC4187ABFEF8A376DADD; SESSION-ADMIN=e5b48f77f64fafb3ad236f132f3f; SESSION-KMON=e5b620549acc6022636c8342a56f; session=.eJyrVorPTFGyqlZSSFKyUooKyTaMDEk28M1Kr_CrCjT1q_LLAsIMX6NQUz-XlBw_98gKv5CwbL8qR1ulWh2l5OKitPiS_OzUPLgR_i7ZBn4uQblRuYHGUe6BFZHhvgaRVa7Gkbm-Jr4u2ZV-VdmGUVnJpr5VyUDaF8Q29nO0BRpXCwBH7yzx.DoTQQg.X4efSJxY-hmgYs_pIlzjG0zuZrw

from future.utils import native

import flask_login
from flask_login import login_required, current_user, logout_user
from flask import flash
from wtforms import (
    Form, PasswordField, StringField)
from wtforms.validators import InputRequired

import ssl

from flask import url_for, redirect

from airflow import models
from airflow import configuration
from airflow.configuration import AirflowConfigException
from airflow.utils.db import provide_session

import traceback
import re

from airflow.utils.log.logging_mixin import LoggingMixin

login_manager = flask_login.LoginManager()
login_manager.login_view = 'airflow.login'  # Calls login() below
login_manager.login_message = None

log = LoggingMixin().log


class AuthenticationError(Exception):
    pass


class HopsworksException(Exception):
    pass


#
# The password could be the secret key that points to the local scratch directory and its JWT key
# /srv/hops/scratch_dirs/<password>/.jwt/key.jwt
# If the key is not found, airflow fails authentication
#
def get_hopsworks_connection(dn=None, password=None):
    tls_configuration = None
    use_ssl = False
    try:
        cacert = configuration.conf.get("hopsworks", "cacert")
        tls_configuration = Tls(validate=ssl.CERT_REQUIRED, ca_certs_file=cacert)
        use_ssl = True
    except:
        pass

    server = Server(configuration.conf.get("hopsworks", "uri"), use_ssl, tls_configuration)
    conn = Connection(server, native(dn), native(password))

    if not conn.bind():
        log.error("Cannot bind to hopsworks server: %s ", conn.last_error)
        raise AuthenticationError("Cannot bind to hopsworks server")

    return conn


class HopsworksUser(models.User):
    def __init__(self, user):
        self.user = user

        # Load and cache superuser and data_profiler settings.
        conn = get_hopsworks_connection(configuration.conf.get("hopsworks", "bind_user"),
                                   configuration.conf.get("hopsworks", "bind_password"))

        superuser_filter = None
        data_profiler_filter = None
        try:
            superuser_filter = configuration.conf.get("hopsworks", "superuser_filter")
        except AirflowConfigException:
            pass

        if not superuser_filter:
            self.superuser = True
            log.debug("Missing configuration for superuser settings or empty. Skipping.")
        else:
            self.superuser = False


    @staticmethod
    def try_login(username, password):
        conn = get_hopsworks_connection(configuration.conf.get("hopsworks", "bind_user"),
                                   configuration.conf.get("hopsworks", "bind_password"))

        # Save jwt token to local directory
        res = True

        # todo: use list or result?
        if not res:
            log.info("Cannot find user %s", username)
            raise AuthenticationError("Invalid username or password")

        entry = conn.response[0]

        conn.unbind()

        try:
            conn = get_hopsworks_connection(entry['dn'], password)
        except KeyError:
            log.error("""
            Unable to parse LDAP structure. If you're using Active Directory
            and not specifying an OU, you must set search_scope=SUBTREE in airflow.cfg.
            %s
            """ % traceback.format_exc())
            raise HopsworksException(
                "Could not parse LDAP structure. "
                "Try setting search_scope in airflow.cfg, or check logs"
            )

        if not conn:
            log.info("Password incorrect for user %s", username)
            raise AuthenticationError("Invalid username or password")

    def is_active(self):
        """Required by flask_login"""
        return True

    def is_authenticated(self):
        """Required by flask_login"""
        return True

    def is_anonymous(self):
        """Required by flask_login"""
        return False

    def get_id(self):
        """Returns the current user id as required by flask_login"""
        return self.user.get_id()

#    def data_profiling(self):
#        """Provides access to data profiling tools"""
#        return self.data_profiler

    def is_superuser(self):
        """Access all the things"""
        return self.superuser


@login_manager.user_loader
@provide_session
def load_user(userid, session=None):
    log.debug("Loading user %s", userid)
    if not userid or userid == 'None':
        return None

    user = session.query(models.User).filter(models.User.id == int(userid)).first()
    return HopsworksUser(user)


@provide_session
def login(self, request, session=None):
    if current_user.is_authenticated():
        flash("You are already logged in")
        return redirect(url_for('admin.index'))

    username = None
    password = None

    form = LoginForm(request.form)

    if request.method == 'POST' and form.validate():
        username = request.form.get("username")
        password = request.form.get("password")

    if not username or not password:
        return self.render('airflow/login.html',
                           title="Airflow - Login",
                           form=form)

    try:
        HopsworksUser.try_login(username, password)
        log.info("User %s successfully authenticated", username)

        user = session.query(models.User).filter(
            models.User.username == username).first()

        if not user:
            user = models.User(
                username=username,
                is_superuser=False)
            session.add(user)

        session.commit()
        session.merge(user)
        flask_login.login_user(HopsworksUser(user))
        session.commit()

        return redirect(request.args.get("next") or url_for("admin.index"))
    except (HopsworksException, AuthenticationError) as e:
        if type(e) == HopsworksException:
            flash(e, "error")
        else:
            flash("Incorrect login details")
        return self.render('airflow/login.html',
                           title="Airflow - Login",
                           form=form)


class LoginForm(Form):
    username = StringField('Username', [InputRequired()])
    password = PasswordField('Password', [InputRequired()])
